{"version":3,"file":"gateway_settings.min.js","sources":["../src/gateway_settings.js"],"sourcesContent":["/**\n * Novalent payment plugin\n *\n * JavaScript for configuring API credentials.\n *\n * @author       Novalnet\n * @module     paygw_novalnet/gateway_settings\n * @copyright(C) Novalnet. All rights reserved. <https://www.novalnet.de/>\n * @license https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(\n    [\n        'jquery',\n        'core/ajax',\n        'core/notification',\n        'core/str',\n        'core/log'\n    ],\n    function(\n        $,\n        Ajax,\n        Notification,\n        Str,\n        log\n    ) {\n\n    var SELECTORS = {\n        SELECTED_TARIFF: '[name=\"novalnet_tariff_id\"]',\n        FORM_PAYMENTS: ['CREDITCARD', 'DIRECT_DEBIT_SEPA', 'INVOICE', 'PREPAYMENT', 'CASHPAYMENT',\n            'GOOGLEPAY', 'APPLEPAY', 'PAYPAL', 'GUARANTEED_DIRECT_DEBIT_SEPA', 'GUARANTEED_INVOICE',\n            'INSTALMENT_INVOICE', 'INSTALMENT_DIRECT_DEBIT_SEPA']\n    };\n\n    /**\n     * Trigger the first load of the preview section and then listen for modifications\n     * to the form to reload the preview with new filter values.\n     * @param {jquery} formId The form element id.\n     *\n     */\n    var init = function(formId) {\n        var form = $('#' + formId);\n        var selectedTariff = form.find(SELECTORS.SELECTED_TARIFF).val();\n\n        if (selectedTariff) {\n            $('[name=\"novalnet_selected_tariff\"]').val(selectedTariff);\n        }\n\n        // Hide all payment method headers\n        SELECTORS.FORM_PAYMENTS.forEach(function(method) {\n            var headerId = '#id_novalnet_' + method.toLowerCase() + '_settings';\n            $(headerId).hide();\n        });\n\n        if ($('[name=\"novalnet_public_key\"]').length && $('[name=\"novalnet_key_password\"]').length) {\n            $('#novalnet_tariff_id').prop('readonly', true);\n            if ('' !== $.trim($('[name=\"novalnet_public_key\"]').val()) &&\n                 '' !== $.trim($('[name=\"novalnet_key_password\"]').val())) {\n                fillNovalnetDetails();\n            } else {\n                nullBasicParams();\n            }\n            $('[name=\"novalnet_public_key\"], [name=\"novalnet_key_password\"]').on(\n                'input change',\n                function(e) {\n                    if ('' !== $.trim($('[name=\"novalnet_public_key\"]').val()) &&\n                         '' !== $.trim($('[name=\"novalnet_key_password\"]').val())) {\n                        if ('input' === e.type) {\n                            if (e.originalEvent.inputType != undefined && 'insertFromPaste' === e.originalEvent.inputType) {\n                                fillNovalnetDetails();\n                            }\n                        } else {\n                            fillNovalnetDetails();\n                        }\n                    } else {\n                        nullBasicParams();\n                    }\n                }\n            ).change();\n        } else {\n            nullBasicParams();\n        }\n\n        $('[name=\"webhook_configure\"]').on(\n            'click',\n            function() {\n                let webhookUrlError = Str.get_string('novalnet_webhook_url_error', 'paygw_novalnet');\n                let webhookUrlElement = $('[name=\"novalnet_webhook_url\"]');\n                let webhookUrl = $.trim(webhookUrlElement.val());\n\n                if (!webhookUrlElement.length || !webhookUrl) {\n                    Notification.alert('Error', webhookUrlError);\n                    return false;\n                }\n\n                Str.get_strings([\n                    {key: 'confirm', component: 'moodle'},\n                    {key: 'novalnet_webhook_notice', component: 'paygw_novalnet'},\n                    {key: 'confirm', component: 'moodle'},\n                    {key: 'cancel', component: 'moodle'}\n                ]).done(function(strings) {\n                    Notification.confirm(\n                        strings[0], // Title.\n                        strings[1], // Novalnet webhook notice?\n                        strings[2], // Confirm.\n                        strings[3], // Cancel.\n                        function() {\n                            handleWebhookConfigure(webhookUrl);\n                        }\n                    );\n                }).fail(Notification.exception);\n                return true;\n            }\n        ).change();\n\n        // Update the hidden field when the user changes the multi-select\n        $('[name=\"novalnet_active_payments[]\"]').on('change', function() {\n            var selectedValues = $(this).val() || [];\n            $('[name=\"novalnet_selected_payments\"]').val(selectedValues.join(','));\n        });\n\n        // Update the hidden field when the user changes the multi-select\n        $('[name=\"novalnet_test_mode_payments[]\"]').on('change', function() {\n            var selectedTestValues = $(this).val() || [];\n            $('[name=\"novalnet_selected_test_payments\"]').val(selectedTestValues.join(','));\n        });\n    };\n\n    var fillNovalnetTariffDetails = function(tariff) {\n        var tariffElement = $('[name=\"novalnet_tariff_id\"]');\n        var savedTariff = $('[name=\"novalnet_selected_tariff\"]').val();\n\n        if ('text' == tariffElement.prop('type')) {\n            tariffElement.replaceWith(\n                '<select class=\"form-select\" name=\"novalnet_tariff_id\" id=\"id_novalnet_tariff_id\"></select>'\n            );\n        }\n\n        tariffElement.empty();\n\n        for (var tariffId in tariff) {\n            var tariffType = tariff[tariffId].type;\n            var tariffValue = tariff[tariffId].name;\n            tariffElement.append(\n                $(\n                    '<option>',\n                    {\n                        value: $.trim(tariffId),\n                        text: $.trim(tariffValue)\n                    }\n                ).attr(\"tariff_type\", $.trim(tariffType))\n            );\n\n            /** Assign tariff id. */\n            if (savedTariff === $.trim(tariffId)) {\n                tariffElement.val($.trim(tariffId));\n                $('[name=\"novalnet_tariff_type\"]').val($.trim(tariffType));\n            }\n        }\n    };\n\n    var fillNovalnetPaymentDetails = function(paymentTypes) {\n        var paymentElement = $('[name=\"novalnet_active_payments[]\"]');\n        var testPaymentElement = $('[name=\"novalnet_test_mode_payments[]\"]');\n        var novalnetPayments = ['ALIPAY', 'APPLEPAY', 'BANCONTACT', 'BLIK', 'CASHPAYMENT', 'CASH_ON_DELIVERY', 'CREDITCARD',\n                                'DIRECT_DEBIT_ACH', 'DIRECT_DEBIT_SEPA', 'EPS', 'GIROPAY', 'GOOGLEPAY',\n                                'GUARANTEED_DIRECT_DEBIT_SEPA', 'GUARANTEED_INVOICE', 'IDEAL', 'INSTALMENT_DIRECT_DEBIT_SEPA',\n                                'IDEAL', 'INSTALMENT_INVOICE', 'INVOICE', 'PREPAYMENT', 'MBWAY', 'MULTIBANCO',\n                                'ONLINE_BANK_TRANSFER', 'ONLINE_TRANSFER', 'PAYCONIQ', 'PAYPAL', 'POSTFINANCE',\n                                'POSTFINANCE_CARD', 'PRZELEWY24', 'TRUSTLY', 'TWINT', 'WECHATPAY'];\n        var savedPayments = $('[name=\"novalnet_selected_payments\"]').val();\n        savedPayments = savedPayments ? savedPayments.split(',') : [];\n        var savedTestPayments = $('[name=\"novalnet_selected_test_payments\"]').val();\n        savedTestPayments = savedTestPayments ? savedTestPayments.split(',') : [];\n\n        paymentElement.empty(); // Remove all existing options\n        testPaymentElement.empty(); // Remove all existing options\n        paymentTypes.forEach(function(novalnetPayment) {\n\n            if ($.inArray(novalnetPayment, novalnetPayments) === -1) {\n                return; // Skip if payment type is not in the allowed list\n            }\n\n            var strings = [\n                {\n                    key: novalnetPayment,\n                    component: 'paygw_novalnet'\n                }\n            ];\n\n            Str.get_strings(strings).then(function(langStrings) {\n                var optionText = langStrings && langStrings.length ? langStrings : novalnetPayment;\n\n                /**\n                 * Adds a new option to the given element if the value does not already exist in the element's options.\n                 *\n                 * @param {HTMLElement} element - The DOM element (typically a <select>) to which the option will be added.\n                 * @param {string} value - The value of the option to be added.\n                 * @param {string} text - The text that will be displayed for the new option.\n                 * @returns {boolean} Returns true if the option was added, false if the option already exists.\n                 */\n                function addOptionIfNotExists(element, value, text) {\n                    if (element.find(`option[value=\"${value}\"]`).length === 0) {\n                        element.append($('<option>', {\n                            value: $.trim(value),\n                            text: text\n                        }));\n                    }\n                }\n\n                // Add the option to both payment elements\n                addOptionIfNotExists(paymentElement, novalnetPayment, optionText);\n                addOptionIfNotExists(testPaymentElement, novalnetPayment, optionText);\n\n                /**\n                 * Selects an option from a given element if the value is present in the provided list.\n                 *\n                 * @param {HTMLElement} element - The DOM element where the option is located.\n                 * @param {string} value - The value to check against the list.\n                 * @param {Array<string>} list - An array of values to compare the value against.\n                 * @returns {boolean} Returns true if the value was found and the option was selected, otherwise false.\n                 */\n                function selectOptionIfInList(element, value, list) {\n                    if ($.inArray(value, list) !== -1) {\n                        element.find(`option[value=\"${value}\"]`).prop('selected', true);\n                    }\n                }\n\n                // Set the option as selected if it's in the savedPayments list\n                selectOptionIfInList(paymentElement, novalnetPayment, savedPayments);\n                selectOptionIfInList(testPaymentElement, novalnetPayment, savedTestPayments);\n                return;\n            }).catch(function(error) {\n                log.error(\"Error loading strings:\");\n                log.error(error);\n                return;\n            });\n\n            // Display settings relevant to the active payment methods only\n            if (SELECTORS.FORM_PAYMENTS.includes(novalnetPayment)) {\n                var selectedHeaderId = '#id_novalnet_' + novalnetPayment.toLowerCase() + '_settings';\n                $(selectedHeaderId).show();\n            }\n        });\n    };\n\n    var handleWebhookConfigure = function(webhookUrl) {\n        const request = {\n            methodname: 'paygw_novalnet_handle_webhook_configure',\n            args: {\n                novalnetApiKey: $.trim($('[name=\"novalnet_public_key\"]').val()),\n                novalnetKeyPassword: $.trim($('[name=\"novalnet_key_password\"]').val()),\n                novalnetWebhookUrl: webhookUrl\n            },\n        };\n\n        Ajax.call([request])[0].then(response => {\n            var parsedResponse = JSON.parse(response.response);\n\n            let message, type;\n            if (parsedResponse.result.status !== '' && parsedResponse.result.status === 'SUCCESS' &&\n                parsedResponse.result.status_code === 100) {\n                message = Str.get_string('novalnet_webhook_configure_success', 'paygw_novalnet');\n                type = 'success';\n            } else {\n                message = parsedResponse.result.status_text;\n                type = 'error';\n            }\n\n            Notification.addNotification({\n                message: message,\n                type: type\n            });\n\n            return;\n        }).catch(error => {\n            // Handle any errors that occur during the promise chain\n            log.error('Error:', error);\n            Notification.addNotification({\n                message: 'An error occurred while processing the request.',\n                type: 'error'\n            });\n        });\n    };\n\n    var fillNovalnetDetails = function() {\n        const request = {\n            methodname: 'paygw_novalnet_get_merchant_details',\n            args: {\n                novalnetApiKey: $.trim($('[name=\"novalnet_public_key\"]').val()),\n                novalnetKeyPassword: $.trim($('[name=\"novalnet_key_password\"]').val()),\n                id: $.trim($('[name=\"id\"]').val()),\n                accountid: $.trim($('[name=\"accountid\"]').val()),\n                gateway: $.trim($('[name=\"gateway\"]').val()),\n            },\n        };\n\n        Ajax.call([request])[0].then(response => {\n            let parsedResponse = JSON.parse(response.response);\n                if ('' !== parsedResponse.result.status && 'SUCCESS' == parsedResponse.result.status &&\n                    100 == parsedResponse.result.status_code) {\n                    fillNovalnetTariffDetails(parsedResponse.merchant.tariff);\n                    fillNovalnetPaymentDetails(parsedResponse.merchant.payment_types);\n                } else {\n                    nullBasicParams();\n                    Notification.addNotification({\n                        message: parsedResponse.result.status_text,\n                        type: 'error'\n                    });\n                }\n                return;\n        }).catch(error => {\n            log.error('AJAX request failed:', error);\n            Notification.addNotification({\n                message: 'An error occurred while retrieving Novalnet configuration.',\n                type: 'error'\n            });\n        });\n    };\n\n    /**\n     * Null config values\n     *\n     */\n    var nullBasicParams = function() {\n        $('[name=\"novalnet_active_payments[]\"]').empty();\n        $('[name=\"novalnet_test_mode_payments[]\"]').empty();\n        $('[name=\"novalnet_tariff_id\"]').empty();\n        $('#novalnet_tariff_id').find('option').remove();\n    };\n\n    return {\n        init: init\n    };\n});\n"],"names":["define","$","Ajax","Notification","Str","log","SELECTORS","SELECTED_TARIFF","FORM_PAYMENTS","handleWebhookConfigure","webhookUrl","request","methodname","args","novalnetApiKey","trim","val","novalnetKeyPassword","novalnetWebhookUrl","call","then","response","parsedResponse","JSON","parse","message","type","result","status","status_code","get_string","status_text","addNotification","catch","error","fillNovalnetDetails","id","accountid","gateway","tariff","tariffElement","savedTariff","tariffId","prop","replaceWith","empty","tariffType","tariffValue","name","append","value","text","attr","fillNovalnetTariffDetails","merchant","paymentTypes","paymentElement","testPaymentElement","novalnetPayments","savedPayments","split","savedTestPayments","forEach","novalnetPayment","inArray","strings","key","component","get_strings","langStrings","optionText","length","addOptionIfNotExists","element","find","selectOptionIfInList","list","includes","selectedHeaderId","toLowerCase","show","fillNovalnetPaymentDetails","payment_types","nullBasicParams","remove","init","formId","selectedTariff","method","headerId","hide","on","e","undefined","originalEvent","inputType","change","webhookUrlError","webhookUrlElement","done","confirm","fail","exception","alert","selectedValues","this","join","selectedTestValues"],"mappings":"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"}